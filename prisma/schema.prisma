generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  COMMON
  TEACHER
  SHEPHERD
  PEDAGOGICAL_DEPARTMENT
  SUPERINTENDENT
  SECRETARY
}

enum Sex {
  MALE
  FEMALE
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         UserRole
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  member          Member?         @relation(fields: [memberId], references: [id])
  memberId        String?         @unique
  TrimestersRooms TrimesterRoom[]

  @@map("users")
}

model Member {
  id        String    @id @default(uuid())
  name      String
  birthDate DateTime  @map("birth_date")
  sex       Sex
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  User          User?
  registrations Registration[]

  @@map("members")
}

model Trimester {
  id            String          @id @default(uuid())
  title         String
  year          Int
  quarter       Int
  startDate     DateTime        @map("start_date")
  endDate       DateTime        @map("end_date")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @updatedAt @map("updated_at")
  TrimesterRoom TrimesterRoom[]
  preLessons    PreLesson[]

  @@map("trimesters")
}

model Room {
  id            String          @id @default(uuid())
  name          String
  minAge        Int?            @map("min_age")
  maxAge        Int?            @map("max_age")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @updatedAt @map("updated_at")
  TrimesterRoom TrimesterRoom[]

  @@map("rooms")
}

model TrimesterRoom {
  id          String @id @default(uuid())
  roomId      String @map("room_id")
  trimesterId String @map("trimester_id")

  room          Room           @relation(fields: [roomId], references: [id])
  trimester     Trimester      @relation(fields: [trimesterId], references: [id])
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime?      @updatedAt @map("updated_at")
  teachers      User[]
  registrations Registration[]
  Lesson        Lesson[]

  @@unique([roomId, trimesterId])
}

model Registration {
  id              String @id @default(uuid())
  trimesterRoomId String @map("trimester_room_id")
  studentId       String @map("student_id")

  timesterRoom TrimesterRoom @relation(fields: [trimesterRoomId], references: [id])
  student      Member        @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("registrations")
}

model PreLesson {
  id          String    @id @default(uuid())
  trimesterId String
  lesson      Int
  date        DateTime
  createdAt   DateTime  @default(now()) @map("created_at")
  trimester   Trimester @relation(fields: [trimesterId], references: [id])
  Lesson      Lesson[]

  @@map("pre-lessons")
}

model Lesson {
  id              String @id @default(uuid())
  trimesterRoomId String
  preLessonId     String
  title           String
  visitors        Int
  bibles          Int
  magazines       Int
  offers          Int
  // studentsAttendanceIds: UniqueEntityId[];

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  preLesson     PreLesson     @relation(fields: [preLessonId], references: [id])
  trimesterRoom TrimesterRoom @relation(fields: [trimesterRoomId], references: [id])
}
